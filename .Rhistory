select(year, artist_unique_id) %>%
plot_normality()
InsMod <- dataset |>
filter(moma_count_to_year > 0)
sqrtIns <- transform(InsMod$moma_count_to_year, method = "sqrt")
summary(sqrtIns)
sqrtIns |>
plot()
Log1Ins <- transform(InsMod$moma_count_to_year, method = "log+1")
summary(Log1Ins)
Log1Ins |>
plot()
InvIns <- transform(InsMod$moma_count_to_year, method = "1/x")
summary(InvIns)
InvIns |>
plot()
SqrdIns <- transform(InsMod$moma_count_to_year, method = "x^2")
summary(SqrdIns)
SqrdIns |>
plot()
CubeIns <- transform(InsMod$moma_count_to_year, method = "x^3")
summary(CubeIns)
CubeIns |>
plot()
BoxCoxIns <- transform(InsMod$moma_count_to_year, method = "Box-Cox")
summary(BoxCoxIns)
BoxCoxIns |>
plot()
# Sets the number of significant figures to 2
options(digits = 2)
# Required package for quick package downloading and loading
if (!require(pacman))
install.packages("pacman")
pacman::p_load(cluster, # K cluster analyses
dlookr, # Exploratory data analysis
formattable, # HTML tables from R outputs
ggfortify, # Plotting tools for stats
ggpubr, # Publishable ggplots
here, # Standardizes paths to data
kableExtra, # Alternative to formattable
knitr, # Needed to write HTML reports
missRanger, # To generate NAs
plotly, # Visualization package
rattle, # Decision tree visualization
rpart, # rpart algorithm
tidyverse, # Powerful data wrangling package suite
visdat) # Another EDA visualization package
# Set global ggplot() theme
# Theme pub_clean() from the ggpubr package with base text size = 16
theme_set(theme_pubclean(base_size = 16))
# All axes titles to their respective far right sides
theme_update(axis.title = element_text(hjust = 1))
# Remove axes ticks
theme_update(axis.ticks = element_blank())
# Remove legend key
theme_update(legend.key = element_blank())
# Let's load a data set from the artists data set
dataset <- read.csv("artists.csv")
dataset
# What does the data look like?
dataset |>
head() |>
formattable()
# What are the properties of the data
dataset |>
diagnose() |>
formattable()
# Table showing outliers
dataset |>
diagnose_outlier() |>
filter(outliers_ratio > 0) |>
mutate(rate = outliers_mean / with_mean) |>
arrange(desc(rate)) |>
select(-outliers_cnt) |>
formattable()
# Boxplots and histograms of data with and without outliers
dataset |>
select(find_outliers(dataset)) |>
plot_outlier()
# Randomly generate NAs for 30
na.dataset <- dataset |>
generateNA(p = 0.3)
# First six rows
na.dataset |>
head() |>
formattable()
# Create the NA table
na.dataset |>
plot_na_pareto(only_na = TRUE, plot = FALSE) |>
formattable() # Publishable table
# Plot the insersect of the columns with missing values
# This plot visualizes the table above
na.dataset |>
plot_na_pareto(only_na = TRUE)
# Plot the intersect of the 3 columns with the most missing values
# This means that some combinations of columns have missing values in the same row
na.dataset |>
select(year, artist_unique_id, whitney_count_to_year) |>
plot_na_intersect(only_na = TRUE)
# Interactive plotly() plot of all NA values to examine every row
na.dataset |>
select(year, artist_race, artist_gender) |>
vis_miss() |>
ggplotly()
# Box plot
dataset %>% # Set the simulated normal data as a data frame
ggplot(aes(x = year, y = artist_gender, fill = artist_gender)) + # Create a ggplot
geom_boxplot(width = 0.5, outlier.size = 2, outlier.alpha = 0.5) +
xlab("Year") +  # Relabel the x axis label
ylab("Artist Gender") + # Remove the y axis label
theme(legend.position = "top")
# Raw summary, output suppressed
mean_out_imp_edition_number <- na.dataset |>
select(edition_number) |>
imputate_outlier(edition_number, method = "mean")
# Output showing the summary statistics of our imputation
mean_out_imp_edition_number |>
summary()
# Visualization of the mean imputation
mean_out_imp_edition_number |>
plot()
# Raw summary, output suppressed
med_out_imp_edition_number <- dataset |>
select(edition_number) |>
imputate_outlier(edition_number, method = "median")
# Output showing the summary statistics of our imputation
med_out_imp_edition_number |>
summary()
# Visualization of the median imputation
med_out_imp_edition_number |>
plot()
# Raw summary, output suppressed
mode_out_imp_edition_number <- dataset |>
select(edition_number) |>
imputate_outlier(edition_number, method = "mode")
# Output showing the summary statistics of our imputation
mode_out_imp_edition_number |>
summary()
# Visualization of the mode imputation
mode_out_imp_edition_number |>
plot()
#check for missing values
any(is.na(dataset))
#Check for infinite values
any(is.infinite(dataset$edition_number))
#Impute missing values
dataset <- na.omit(dataset)
# KNN plot of our dataset without categories
autoplot(clara(dataset[-6], 3))
library(magrittr)
non_numeric <- dataset %>%
select_if(is.numeric)
# Raw summary, output suppressed
knn_na_imp_space <- non_numeric %>%
imputate_na(edition_number, method = "knn")
# Plot showing the results of our imputation
knn_na_imp_space %>%
plot()
library(magrittr)
non_numeric <- na.dataset %>%
select_if(is.numeric)
# Raw summary, output suppressed
rpart_na_imp_space <- non_numeric %>%
imputate_na(edition_number, method = "rpart")
# Plot showing the results of our imputation
rpart_na_imp_space %>%
plot()
library(magrittr)
non_numeric <- na.dataset %>%
select_if(is.numeric)
# Raw summary, output suppressed
mice_na_imp_edition_number <- non_numeric %>%
imputate_na(edition_number, method = "mice", seed = 123)
# Plot showing the results of our imputation
mice_na_imp_edition_number |>
plot()
if (!require(pacman))
install.packages("pacman")
pacman::p_load(dlookr,
formattable,
GGally,
ggdist,
ggpubr,
ggridges,
here,
tidyverse)
# Set global ggplot() theme
# Theme pub_clean() from the ggpubr package with base text size = 16
theme_set(theme_pubclean(base_size = 12))
# All axes titles to their respective far right sides
theme_update(axis.title = element_text(hjust = 1))
# Remove axes ticks
theme_update(axis.ticks = element_blank())
# Remove legend key
theme_update(legend.key = element_blank())
# Let's load a data set from the artists data set
dataset <- read.csv("artists.csv")
dataset
# What does the data look like?
dataset |>
head() |>
formattable()
# Table of correlations between numerical variables
correlate(dataset) |>
formattable()
# Correlation matrix of numerical variables
dataset |>
plot_correlate()
dataset |>
group_by(book) |>
plot_correlate()
dataset |>
dplyr::select(artist_gender, edition_number, artist_unique_id) |>
ggpairs(aes(color = artist_gender, alpha = 0.5)) +
theme(strip.background = element_blank()) # I don't like facet strip backgrounds...
# First, we need to remove NAs, they cause an error
dataset.noNA <- dataset |>
drop_na()
# The numerical predictor variable that we want
num <- target_by(dataset.noNA, year)
# Relating the variable of interest to the numerical target variable
num_num <- relate(num, artist_unique_id)
# Summary of the regression analysis - the same as the summary from lm(Formula)
summary(num_num)
# Plotting the linear relationship
plot(num_num)
# The categorical predictor variable that we want
num <- target_by(dataset, edition_number)
# We need to change Group to a factor
num$book <- as.factor(num$book)
# Relating the variable of interest to the numerical target variable
num_cat <- relate(num, book)
# Summary of the ANOVA analysis - the same as the summary from anova(lm(Formula))
summary(num_cat)
plot(num_cat) +
theme(axis.text.x = element_blank())
# The categorical predictor variable that we want
categ <- target_by(dataset, artist_gender)
# Relating the variable of interest to the numerical target variable
cat_num <- relate(categ, year)
# Summary of descriptive statistics
summary(cat_num)
plot(cat_num)
# Create new categorical column
cat_dataset <- dataset |>
select(edition_number, book) |>
drop_na() |>
mutate(Latest_Edition = ifelse(
edition_number > (mean(edition_number + sd(edition_number))),
"Yes",
"No"))
# New dataset
cat_dataset |>
head() |>
formattable()
# The categorical predictor variable that we want
categ <- target_by(cat_dataset, Latest_Edition)
# Relating the variable of interest to the categorical target variable
cat_cat <- relate(categ, book)
# Summary of the Chi-square test for Independence
summary(cat_cat)
plot(cat_cat)
sqrtIns |>
plot()
Log1Ins |>
plot()
InvIns |>
plot()
SqrdIns |>
plot()
CubeIns |>
plot()
BoxCoxIns |>
plot()
# Sets the number of significant figures to 2
options(digits = 2)
# Required package for quick package downloading and loading
if (!require(pacman))
install.packages("pacman")
pacman::p_load(cluster, # K cluster analyses
dlookr, # Exploratory data analysis
formattable, # HTML tables from R outputs
ggfortify, # Plotting tools for stats
ggpubr, # Publishable ggplots
here, # Standardizes paths to data
kableExtra, # Alternative to formattable
knitr, # Needed to write HTML reports
missRanger, # To generate NAs
plotly, # Visualization package
rattle, # Decision tree visualization
rpart, # rpart algorithm
tidyverse, # Powerful data wrangling package suite
visdat) # Another EDA visualization package
# Set global ggplot() theme
# Theme pub_clean() from the ggpubr package with base text size = 16
theme_set(theme_pubclean(base_size = 16))
# All axes titles to their respective far right sides
theme_update(axis.title = element_text(hjust = 1))
# Remove axes ticks
theme_update(axis.ticks = element_blank())
# Remove legend key
theme_update(legend.key = element_blank())
# Let's load a data set from the artists data set
dataset <- read.csv("artists.csv")
dataset
# What does the data look like?
dataset |>
head() |>
formattable()
# What are the properties of the data
dataset |>
diagnose() |>
formattable()
# Table showing outliers
dataset |>
diagnose_outlier() |>
filter(outliers_ratio > 0) |>
mutate(rate = outliers_mean / with_mean) |>
arrange(desc(rate)) |>
select(-outliers_cnt) |>
formattable()
# Boxplots and histograms of data with and without outliers
dataset |>
select(find_outliers(dataset)) |>
plot_outlier()
# Randomly generate NAs for 30
na.dataset <- dataset |>
generateNA(p = 0.3)
# First six rows
na.dataset |>
head() |>
formattable()
# Create the NA table
na.dataset |>
plot_na_pareto(only_na = TRUE, plot = FALSE) |>
formattable() # Publishable table
# Plot the insersect of the columns with missing values
# This plot visualizes the table above
na.dataset |>
plot_na_pareto(only_na = TRUE)
# Plot the intersect of the 3 columns with the most missing values
# This means that some combinations of columns have missing values in the same row
na.dataset |>
select(year, artist_unique_id, whitney_count_to_year) |>
plot_na_intersect(only_na = TRUE)
# Interactive plotly() plot of all NA values to examine every row
na.dataset |>
select(year, artist_race, artist_gender) |>
vis_miss() |>
ggplotly()
# Box plot
dataset %>% # Set the simulated normal data as a data frame
ggplot(aes(x = year, y = artist_gender, fill = artist_gender)) + # Create a ggplot
geom_boxplot(width = 0.5, outlier.size = 2, outlier.alpha = 0.5) +
xlab("Year") +  # Relabel the x axis label
ylab("Artist Gender") + # Remove the y axis label
theme(legend.position = "top")
# Raw summary, output suppressed
mean_out_imp_edition_number <- na.dataset |>
select(edition_number) |>
imputate_outlier(edition_number, method = "mean")
# Output showing the summary statistics of our imputation
mean_out_imp_edition_number |>
summary()
# Visualization of the mean imputation
mean_out_imp_edition_number |>
plot()
# Raw summary, output suppressed
med_out_imp_edition_number <- dataset |>
select(edition_number) |>
imputate_outlier(edition_number, method = "median")
# Output showing the summary statistics of our imputation
med_out_imp_edition_number |>
summary()
# Visualization of the median imputation
med_out_imp_edition_number |>
plot()
# Raw summary, output suppressed
mode_out_imp_edition_number <- dataset |>
select(edition_number) |>
imputate_outlier(edition_number, method = "mode")
# Output showing the summary statistics of our imputation
mode_out_imp_edition_number |>
summary()
# Visualization of the mode imputation
mode_out_imp_edition_number |>
plot()
#check for missing values
any(is.na(dataset))
#Check for infinite values
any(is.infinite(dataset$edition_number))
#Impute missing values
dataset <- na.omit(dataset)
# KNN plot of our dataset without categories
autoplot(clara(dataset[-6], 3))
library(magrittr)
non_numeric <- dataset %>%
select_if(is.numeric)
# Raw summary, output suppressed
knn_na_imp_space <- non_numeric %>%
imputate_na(edition_number, method = "knn")
# Plot showing the results of our imputation
knn_na_imp_space %>%
plot()
library(magrittr)
non_numeric <- na.dataset %>%
select_if(is.numeric)
# Raw summary, output suppressed
rpart_na_imp_space <- non_numeric %>%
imputate_na(edition_number, method = "rpart")
# Plot showing the results of our imputation
rpart_na_imp_space %>%
plot()
library(magrittr)
non_numeric <- na.dataset %>%
select_if(is.numeric)
# Raw summary, output suppressed
mice_na_imp_edition_number <- non_numeric %>%
imputate_na(edition_number, method = "mice", seed = 123)
# Plot showing the results of our imputation
mice_na_imp_edition_number |>
plot()
if (!require(pacman))
install.packages("pacman")
pacman::p_load(dlookr,
formattable,
GGally,
ggdist,
ggpubr,
ggridges,
here,
tidyverse)
# Set global ggplot() theme
# Theme pub_clean() from the ggpubr package with base text size = 16
theme_set(theme_pubclean(base_size = 12))
# All axes titles to their respective far right sides
theme_update(axis.title = element_text(hjust = 1))
# Remove axes ticks
theme_update(axis.ticks = element_blank())
# Remove legend key
theme_update(legend.key = element_blank())
# Let's load a data set from the artists data set
dataset <- read.csv("artists.csv")
dataset
# What does the data look like?
dataset |>
head() |>
formattable()
# Table of correlations between numerical variables
correlate(dataset) |>
formattable()
# Correlation matrix of numerical variables
dataset |>
plot_correlate()
dataset |>
group_by(book) |>
plot_correlate()
dataset |>
dplyr::select(artist_gender, edition_number, artist_unique_id) |>
ggpairs(aes(color = artist_gender, alpha = 0.5)) +
theme(strip.background = element_blank()) # I don't like facet strip backgrounds...
# First, we need to remove NAs, they cause an error
dataset.noNA <- dataset |>
drop_na()
# The numerical predictor variable that we want
num <- target_by(dataset.noNA, year)
# Relating the variable of interest to the numerical target variable
num_num <- relate(num, artist_unique_id)
# Summary of the regression analysis - the same as the summary from lm(Formula)
summary(num_num)
# Plotting the linear relationship
plot(num_num)
# The categorical predictor variable that we want
num <- target_by(dataset, edition_number)
# We need to change Group to a factor
num$book <- as.factor(num$book)
# Relating the variable of interest to the numerical target variable
num_cat <- relate(num, book)
# Summary of the ANOVA analysis - the same as the summary from anova(lm(Formula))
summary(num_cat)
plot(num_cat) +
theme(axis.text.x = element_blank())
# The categorical predictor variable that we want
categ <- target_by(dataset, artist_gender)
# Relating the variable of interest to the numerical target variable
cat_num <- relate(categ, year)
# Summary of descriptive statistics
summary(cat_num)
plot(cat_num)
# Create new categorical column
cat_dataset <- dataset |>
select(edition_number, book) |>
drop_na() |>
mutate(Latest_Edition = ifelse(
edition_number > (mean(edition_number + sd(edition_number))),
"Yes",
"No"))
# New dataset
cat_dataset |>
head() |>
formattable()
# The categorical predictor variable that we want
categ <- target_by(cat_dataset, Latest_Edition)
# Relating the variable of interest to the categorical target variable
cat_cat <- relate(categ, book)
# Summary of the Chi-square test for Independence
summary(cat_cat)
plot(cat_cat)
if(!require(packman))
install.packages("pacman")
pacman::p_load(tidyverse, rpart, rpart.plot, caret,
lattice, FSelector, sampling, pROC, mlbench)
